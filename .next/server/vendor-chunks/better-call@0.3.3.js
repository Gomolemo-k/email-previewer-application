"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/better-call@0.3.3";
exports.ids = ["vendor-chunks/better-call@0.3.3"];
exports.modules = {

/***/ "(action-browser)/./node_modules/.pnpm/better-call@0.3.3/node_modules/better-call/dist/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-call@0.3.3/node_modules/better-call/dist/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   createEndpoint: () => (/* binding */ createEndpoint),\n/* harmony export */   createEndpointCreator: () => (/* binding */ createEndpointCreator),\n/* harmony export */   createMiddleware: () => (/* binding */ createMiddleware),\n/* harmony export */   createMiddlewareCreator: () => (/* binding */ createMiddlewareCreator),\n/* harmony export */   createRouter: () => (/* binding */ createRouter),\n/* harmony export */   getBody: () => (/* binding */ getBody),\n/* harmony export */   getCookie: () => (/* binding */ getCookie),\n/* harmony export */   getRequest: () => (/* binding */ getRequest),\n/* harmony export */   getSignedCookie: () => (/* binding */ getSignedCookie),\n/* harmony export */   json: () => (/* binding */ json),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseSigned: () => (/* binding */ parseSigned),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializeSigned: () => (/* binding */ serializeSigned),\n/* harmony export */   setCookie: () => (/* binding */ setCookie),\n/* harmony export */   setResponse: () => (/* binding */ setResponse),\n/* harmony export */   setSignedCookie: () => (/* binding */ setSignedCookie),\n/* harmony export */   shouldSerialize: () => (/* binding */ shouldSerialize),\n/* harmony export */   signCookieValue: () => (/* binding */ signCookieValue),\n/* harmony export */   statusCode: () => (/* binding */ statusCode),\n/* harmony export */   toNodeHandler: () => (/* binding */ toNodeHandler)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/.pnpm/zod@3.25.64/node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var uncrypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uncrypto */ \"(action-browser)/./node_modules/.pnpm/uncrypto@0.1.3/node_modules/uncrypto/dist/crypto.node.mjs\");\n/* harmony import */ var rou3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rou3 */ \"(action-browser)/./node_modules/.pnpm/rou3@0.5.1/node_modules/rou3/dist/index.mjs\");\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// node_modules/set-cookie-parser/lib/set-cookie.js\nvar require_set_cookie = __commonJS({\n  \"node_modules/set-cookie-parser/lib/set-cookie.js\"(exports, module) {\n    \"use strict\";\n    var defaultParseOptions = {\n      decodeValues: true,\n      map: false,\n      silent: false\n    };\n    function isNonEmptyString(str) {\n      return typeof str === \"string\" && !!str.trim();\n    }\n    function parseString(setCookieValue, options) {\n      var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n      var nameValuePairStr = parts.shift();\n      var parsed = parseNameValuePair(nameValuePairStr);\n      var name = parsed.name;\n      var value = parsed.value;\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      try {\n        value = options.decodeValues ? decodeURIComponent(value) : value;\n      } catch (e) {\n        console.error(\n          \"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\",\n          e\n        );\n      }\n      var cookie = {\n        name,\n        value\n      };\n      parts.forEach(function(part) {\n        var sides = part.split(\"=\");\n        var key = sides.shift().trimLeft().toLowerCase();\n        var value2 = sides.join(\"=\");\n        if (key === \"expires\") {\n          cookie.expires = new Date(value2);\n        } else if (key === \"max-age\") {\n          cookie.maxAge = parseInt(value2, 10);\n        } else if (key === \"secure\") {\n          cookie.secure = true;\n        } else if (key === \"httponly\") {\n          cookie.httpOnly = true;\n        } else if (key === \"samesite\") {\n          cookie.sameSite = value2;\n        } else if (key === \"partitioned\") {\n          cookie.partitioned = true;\n        } else {\n          cookie[key] = value2;\n        }\n      });\n      return cookie;\n    }\n    function parseNameValuePair(nameValuePairStr) {\n      var name = \"\";\n      var value = \"\";\n      var nameValueArr = nameValuePairStr.split(\"=\");\n      if (nameValueArr.length > 1) {\n        name = nameValueArr.shift();\n        value = nameValueArr.join(\"=\");\n      } else {\n        value = nameValuePairStr;\n      }\n      return { name, value };\n    }\n    function parse2(input, options) {\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      if (!input) {\n        if (!options.map) {\n          return [];\n        } else {\n          return {};\n        }\n      }\n      if (input.headers) {\n        if (typeof input.headers.getSetCookie === \"function\") {\n          input = input.headers.getSetCookie();\n        } else if (input.headers[\"set-cookie\"]) {\n          input = input.headers[\"set-cookie\"];\n        } else {\n          var sch = input.headers[Object.keys(input.headers).find(function(key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })];\n          if (!sch && input.headers.cookie && !options.silent) {\n            console.warn(\n              \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n            );\n          }\n          input = sch;\n        }\n      }\n      if (!Array.isArray(input)) {\n        input = [input];\n      }\n      if (!options.map) {\n        return input.filter(isNonEmptyString).map(function(str) {\n          return parseString(str, options);\n        });\n      } else {\n        var cookies = {};\n        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {\n          var cookie = parseString(str, options);\n          cookies2[cookie.name] = cookie;\n          return cookies2;\n        }, cookies);\n      }\n    }\n    function splitCookiesString2(cookiesString) {\n      if (Array.isArray(cookiesString)) {\n        return cookiesString;\n      }\n      if (typeof cookiesString !== \"string\") {\n        return [];\n      }\n      var cookiesStrings = [];\n      var pos = 0;\n      var start;\n      var ch;\n      var lastComma;\n      var nextStart;\n      var cookiesSeparatorFound;\n      function skipWhitespace() {\n        while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n          pos += 1;\n        }\n        return pos < cookiesString.length;\n      }\n      function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n      }\n      while (pos < cookiesString.length) {\n        start = pos;\n        cookiesSeparatorFound = false;\n        while (skipWhitespace()) {\n          ch = cookiesString.charAt(pos);\n          if (ch === \",\") {\n            lastComma = pos;\n            pos += 1;\n            skipWhitespace();\n            nextStart = pos;\n            while (pos < cookiesString.length && notSpecialChar()) {\n              pos += 1;\n            }\n            if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n              cookiesSeparatorFound = true;\n              pos = nextStart;\n              cookiesStrings.push(cookiesString.substring(start, lastComma));\n              start = pos;\n            } else {\n              pos = lastComma + 1;\n            }\n          } else {\n            pos += 1;\n          }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n      }\n      return cookiesStrings;\n    }\n    module.exports = parse2;\n    module.exports.parse = parse2;\n    module.exports.parseString = parseString;\n    module.exports.splitCookiesString = splitCookiesString2;\n  }\n});\n\n// src/endpoint.ts\n\n\n// src/error.ts\nvar APIError = class extends Error {\n  constructor(status, body, headers) {\n    super(`API Error: ${status} ${body?.message ?? \"\"}`, {\n      cause: body\n    });\n    __publicField(this, \"status\");\n    __publicField(this, \"headers\");\n    __publicField(this, \"body\");\n    this.status = status;\n    this.body = body ?? {};\n    this.body.code = body?.message ? body.message.toUpperCase().replace(/ /g, \"_\").replace(/[^A-Z0-9_]/g, \"\") : status;\n    this.stack = \"\";\n    this.headers = headers ?? new Headers();\n    if (!this.headers.has(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json\");\n    }\n    this.name = \"BetterCallAPIError\";\n  }\n};\n\n// src/helper.ts\nvar json = (body, option) => {\n  return {\n    response: {\n      body: option?.body ?? body,\n      status: option?.status ?? 200,\n      statusText: option?.statusText ?? \"OK\",\n      headers: option?.headers\n    },\n    body,\n    _flag: \"json\"\n  };\n};\n\n// src/cookie.ts\n\nvar algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\nvar getCryptoKey = async (secret) => {\n  const secretBuf = typeof secret === \"string\" ? new TextEncoder().encode(secret) : secret;\n  return await uncrypto__WEBPACK_IMPORTED_MODULE_1__.subtle.importKey(\"raw\", secretBuf, algorithm, false, [\"sign\", \"verify\"]);\n};\nvar makeSignature = async (value, secret) => {\n  const key = await getCryptoKey(secret);\n  const signature = await uncrypto__WEBPACK_IMPORTED_MODULE_1__.subtle.sign(algorithm.name, key, new TextEncoder().encode(value));\n  return btoa(String.fromCharCode(...new Uint8Array(signature)));\n};\nvar verifySignature = async (base64Signature, value, secret) => {\n  try {\n    const signatureBinStr = atob(base64Signature);\n    const signature = new Uint8Array(signatureBinStr.length);\n    for (let i = 0, len = signatureBinStr.length; i < len; i++) {\n      signature[i] = signatureBinStr.charCodeAt(i);\n    }\n    return await uncrypto__WEBPACK_IMPORTED_MODULE_1__.subtle.verify(algorithm, secret, signature, new TextEncoder().encode(value));\n  } catch (e) {\n    return false;\n  }\n};\nvar validCookieNameRegEx = /^[\\w!#$%&'*.^`|~+-]+$/;\nvar validCookieValueRegEx = /^[ !#-:<-[\\]-~]*$/;\nvar parse = (cookie, name) => {\n  const pairs = cookie.trim().split(\";\");\n  return pairs.reduce((parsedCookie, pairStr) => {\n    pairStr = pairStr.trim();\n    const valueStartPos = pairStr.indexOf(\"=\");\n    if (valueStartPos === -1) {\n      return parsedCookie;\n    }\n    const cookieName = pairStr.substring(0, valueStartPos).trim();\n    if (name && name !== cookieName || !validCookieNameRegEx.test(cookieName)) {\n      return parsedCookie;\n    }\n    let cookieValue = pairStr.substring(valueStartPos + 1).trim();\n    if (cookieValue.startsWith('\"') && cookieValue.endsWith('\"')) {\n      cookieValue = cookieValue.slice(1, -1);\n    }\n    if (validCookieValueRegEx.test(cookieValue)) {\n      parsedCookie[cookieName] = decodeURIComponent(cookieValue);\n    }\n    return parsedCookie;\n  }, {});\n};\nvar parseSigned = async (cookie, secret, name) => {\n  const parsedCookie = {};\n  const secretKey = await getCryptoKey(secret);\n  for (const [key, value] of Object.entries(parse(cookie, name))) {\n    const signatureStartPos = value.lastIndexOf(\".\");\n    if (signatureStartPos < 1) {\n      continue;\n    }\n    const signedValue = value.substring(0, signatureStartPos);\n    const signature = value.substring(signatureStartPos + 1);\n    if (signature.length !== 44 || !signature.endsWith(\"=\")) {\n      continue;\n    }\n    const isVerified = await verifySignature(signature, signedValue, secretKey);\n    parsedCookie[key] = isVerified ? signedValue : false;\n  }\n  return parsedCookie;\n};\nvar _serialize = (name, value, opt = {}) => {\n  let cookie = `${name}=${value}`;\n  if (name.startsWith(\"__Secure-\") && !opt.secure) {\n    opt.secure = true;\n  }\n  if (name.startsWith(\"__Host-\")) {\n    if (!opt.secure) {\n      opt.secure = true;\n    }\n    if (opt.path !== \"/\") {\n      opt.path = \"/\";\n    }\n    if (opt.domain) {\n      opt.domain = void 0;\n    }\n  }\n  if (opt && typeof opt.maxAge === \"number\" && opt.maxAge >= 0) {\n    if (opt.maxAge > 3456e4) {\n      throw new Error(\n        \"Cookies Max-Age SHOULD NOT be greater than 400 days (34560000 seconds) in duration.\"\n      );\n    }\n    cookie += `; Max-Age=${Math.floor(opt.maxAge)}`;\n  }\n  if (opt.domain && opt.prefix !== \"host\") {\n    cookie += `; Domain=${opt.domain}`;\n  }\n  if (opt.path) {\n    cookie += `; Path=${opt.path}`;\n  }\n  if (opt.expires) {\n    if (opt.expires.getTime() - Date.now() > 3456e7) {\n      throw new Error(\n        \"Cookies Expires SHOULD NOT be greater than 400 days (34560000 seconds) in the future.\"\n      );\n    }\n    cookie += `; Expires=${opt.expires.toUTCString()}`;\n  }\n  if (opt.httpOnly) {\n    cookie += \"; HttpOnly\";\n  }\n  if (opt.secure) {\n    cookie += \"; Secure\";\n  }\n  if (opt.sameSite) {\n    cookie += `; SameSite=${opt.sameSite.charAt(0).toUpperCase() + opt.sameSite.slice(1)}`;\n  }\n  if (opt.partitioned) {\n    if (!opt.secure) {\n      throw new Error(\"Partitioned Cookie must have Secure attributes\");\n    }\n    cookie += \"; Partitioned\";\n  }\n  return cookie;\n};\nvar serialize = (name, value, opt) => {\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nvar serializeSigned = async (name, value, secret, opt = {}) => {\n  const signature = await makeSignature(value, secret);\n  value = `${value}.${signature}`;\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nvar signCookieValue = async (value, secret) => {\n  const signature = await makeSignature(value, secret);\n  value = `${value}.${signature}`;\n  value = encodeURIComponent(value);\n  return value;\n};\n\n// src/cookie-utils.ts\nvar getCookie = (cookie, key, prefix) => {\n  if (!cookie) {\n    return void 0;\n  }\n  let finalKey = key;\n  if (prefix) {\n    if (prefix === \"secure\") {\n      finalKey = \"__Secure-\" + key;\n    } else if (prefix === \"host\") {\n      finalKey = \"__Host-\" + key;\n    } else {\n      return void 0;\n    }\n  }\n  const obj = parse(cookie, finalKey);\n  return obj[finalKey];\n};\nvar setCookie = (header, name, value, opt) => {\n  const existingCookies = header.get(\"Set-Cookie\");\n  if (existingCookies) {\n    const cookies = existingCookies.split(\", \");\n    const updatedCookies = cookies.filter((cookie2) => !cookie2.startsWith(`${name}=`));\n    header.delete(\"Set-Cookie\");\n    updatedCookies.forEach((cookie2) => header.append(\"Set-Cookie\", cookie2));\n  }\n  let cookie;\n  if (opt?.prefix === \"secure\") {\n    cookie = serialize(\"__Secure-\" + name, value, { path: \"/\", ...opt, secure: true });\n  } else if (opt?.prefix === \"host\") {\n    cookie = serialize(\"__Host-\" + name, value, {\n      ...opt,\n      path: \"/\",\n      secure: true,\n      domain: void 0\n    });\n  } else {\n    cookie = serialize(name, value, { path: \"/\", ...opt });\n  }\n  header.append(\"Set-Cookie\", cookie);\n};\nvar setSignedCookie = async (header, name, value, secret, opt) => {\n  let cookie;\n  if (opt?.prefix === \"secure\") {\n    cookie = await serializeSigned(\"__Secure-\" + name, value, secret, {\n      path: \"/\",\n      ...opt,\n      secure: true\n    });\n  } else if (opt?.prefix === \"host\") {\n    cookie = await serializeSigned(\"__Host-\" + name, value, secret, {\n      ...opt,\n      path: \"/\",\n      secure: true,\n      domain: void 0\n    });\n  } else {\n    cookie = await serializeSigned(name, value, secret, { path: \"/\", ...opt });\n  }\n  header.append(\"Set-Cookie\", cookie);\n};\nvar getSignedCookie = async (header, secret, key, prefix) => {\n  const cookie = header.get(\"cookie\");\n  if (!cookie) {\n    return void 0;\n  }\n  let finalKey = key;\n  if (prefix) {\n    if (prefix === \"secure\") {\n      finalKey = \"__Secure-\" + key;\n    } else if (prefix === \"host\") {\n      finalKey = \"__Host-\" + key;\n    }\n  }\n  const obj = await parseSigned(cookie, secret, finalKey);\n  return obj[finalKey];\n};\n\n// src/endpoint.ts\nfunction createEndpointCreator(opts) {\n  return (path, options, handler) => {\n    return createEndpoint(\n      path,\n      {\n        ...options,\n        use: [...options?.use || [], ...opts?.use || []]\n      },\n      handler\n    );\n  };\n}\nfunction createEndpoint(path, options, handler) {\n  let responseHeader = new Headers();\n  const handle = async (...ctx) => {\n    let internalCtx = {\n      setHeader(key, value) {\n        responseHeader.set(key, value);\n      },\n      setCookie(key, value, options2) {\n        setCookie(responseHeader, key, value, options2);\n      },\n      getCookie(key, prefix) {\n        const header = ctx[0]?.headers;\n        const cookieH = header?.get(\"cookie\");\n        const cookie = getCookie(cookieH || \"\", key, prefix);\n        return cookie;\n      },\n      getSignedCookie(key, secret, prefix) {\n        const header = ctx[0]?.headers;\n        if (!header) {\n          throw new TypeError(\"Headers are required\");\n        }\n        const cookie = getSignedCookie(header, secret, key, prefix);\n        return cookie;\n      },\n      async setSignedCookie(key, value, secret, options2) {\n        await setSignedCookie(responseHeader, key, value, secret, options2);\n      },\n      redirect(url) {\n        responseHeader.set(\"Location\", url);\n        return new APIError(\"FOUND\");\n      },\n      json,\n      context: ctx[0]?.context || {},\n      _flag: ctx[0]?.asResponse ? \"router\" : ctx[0]?._flag,\n      responseHeader,\n      path,\n      ...ctx[0] || {}\n    };\n    if (options.use?.length) {\n      let middlewareContexts = {};\n      let middlewareBody = {};\n      for (const middleware of options.use) {\n        if (typeof middleware !== \"function\") {\n          console.warn(\"Middleware is not a function\", {\n            middleware\n          });\n          continue;\n        }\n        const res = await middleware(internalCtx);\n        if (res) {\n          const body = res.options?.body ? res.options.body.parse(internalCtx.body) : void 0;\n          middlewareContexts = {\n            ...middlewareContexts,\n            ...res\n          };\n          middlewareBody = {\n            ...middlewareBody,\n            ...body\n          };\n        }\n      }\n      internalCtx = {\n        ...internalCtx,\n        body: {\n          ...middlewareBody,\n          ...internalCtx.body\n        },\n        context: {\n          ...internalCtx.context || {},\n          ...middlewareContexts\n        }\n      };\n    }\n    try {\n      const body = options.body ? options.body.parse(internalCtx.body) : internalCtx.body;\n      internalCtx = {\n        ...internalCtx,\n        body: body ? {\n          ...body,\n          ...internalCtx.body\n        } : internalCtx.body\n      };\n      internalCtx.query = options.query ? options.query.parse(internalCtx.query) : internalCtx.query;\n    } catch (e) {\n      if (e instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodError) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: e.message,\n          details: e.errors\n        });\n      }\n      throw e;\n    }\n    if (options.requireHeaders && !internalCtx.headers) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Headers are required\"\n      });\n    }\n    if (options.requireRequest && !internalCtx.request) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Request is required\"\n      });\n    }\n    if (internalCtx.request && !internalCtx.headers) {\n      internalCtx.headers = internalCtx.request.headers;\n    }\n    try {\n      let res = await handler(internalCtx);\n      let actualResponse = res;\n      if (res && typeof res === \"object\" && \"_flag\" in res) {\n        if (res._flag === \"json\" && internalCtx._flag === \"router\") {\n          const h = res.response.headers;\n          Object.keys(h || {}).forEach((key) => {\n            responseHeader.set(key, h[key]);\n          });\n          responseHeader.set(\"Content-Type\", \"application/json\");\n          actualResponse = new Response(JSON.stringify(res.response.body), {\n            status: res.response.status ?? 200,\n            statusText: res.response.statusText,\n            headers: responseHeader\n          });\n        } else {\n          actualResponse = res.body;\n        }\n      }\n      responseHeader = new Headers();\n      return actualResponse;\n    } catch (e) {\n      if (e instanceof APIError) {\n        responseHeader.set(\"Content-Type\", \"application/json\");\n        e.headers = responseHeader;\n        responseHeader = new Headers();\n        throw e;\n      }\n      throw e;\n    }\n  };\n  handle.path = path;\n  handle.options = options;\n  handle.method = options.method;\n  handle.headers = responseHeader;\n  return handle;\n}\n\n// src/router.ts\n\n\n// src/utils.ts\nasync function getBody(request) {\n  const contentType = request.headers.get(\"content-type\") || \"\";\n  if (!request.body) {\n    return void 0;\n  }\n  if (contentType.includes(\"application/json\")) {\n    return await request.json();\n  }\n  if (contentType.includes(\"application/x-www-form-urlencoded\")) {\n    const formData = await request.formData();\n    const result = {};\n    formData.forEach((value, key) => {\n      result[key] = value.toString();\n    });\n    return result;\n  }\n  if (contentType.includes(\"multipart/form-data\")) {\n    const formData = await request.formData();\n    const result = {};\n    formData.forEach((value, key) => {\n      result[key] = value;\n    });\n    return result;\n  }\n  if (contentType.includes(\"text/plain\")) {\n    return await request.text();\n  }\n  if (contentType.includes(\"application/octet-stream\")) {\n    return await request.arrayBuffer();\n  }\n  if (contentType.includes(\"application/pdf\") || contentType.includes(\"image/\") || contentType.includes(\"video/\")) {\n    const blob = await request.blob();\n    return blob;\n  }\n  if (contentType.includes(\"application/stream\") || request.body instanceof ReadableStream) {\n    return request.body;\n  }\n  return await request.text();\n}\nfunction shouldSerialize(body) {\n  return typeof body === \"object\" && body !== null && !(body instanceof Blob) && !(body instanceof FormData);\n}\nvar statusCode = {\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NO_CONTENT: 204,\n  MULTIPLE_CHOICES: 300,\n  MOVED_PERMANENTLY: 301,\n  FOUND: 302,\n  SEE_OTHER: 303,\n  NOT_MODIFIED: 304,\n  TEMPORARY_REDIRECT: 307,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  PAYMENT_REQUIRED: 402,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  METHOD_NOT_ALLOWED: 405,\n  NOT_ACCEPTABLE: 406,\n  PROXY_AUTHENTICATION_REQUIRED: 407,\n  REQUEST_TIMEOUT: 408,\n  CONFLICT: 409,\n  GONE: 410,\n  LENGTH_REQUIRED: 411,\n  PRECONDITION_FAILED: 412,\n  PAYLOAD_TOO_LARGE: 413,\n  URI_TOO_LONG: 414,\n  UNSUPPORTED_MEDIA_TYPE: 415,\n  RANGE_NOT_SATISFIABLE: 416,\n  EXPECTATION_FAILED: 417,\n  \"I'M_A_TEAPOT\": 418,\n  MISDIRECTED_REQUEST: 421,\n  UNPROCESSABLE_ENTITY: 422,\n  LOCKED: 423,\n  FAILED_DEPENDENCY: 424,\n  TOO_EARLY: 425,\n  UPGRADE_REQUIRED: 426,\n  PRECONDITION_REQUIRED: 428,\n  TOO_MANY_REQUESTS: 429,\n  REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n  UNAVAILABLE_FOR_LEGAL_REASONS: 451,\n  INTERNAL_SERVER_ERROR: 500,\n  NOT_IMPLEMENTED: 501,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504,\n  HTTP_VERSION_NOT_SUPPORTED: 505,\n  VARIANT_ALSO_NEGOTIATES: 506,\n  INSUFFICIENT_STORAGE: 507,\n  LOOP_DETECTED: 508,\n  NOT_EXTENDED: 510,\n  NETWORK_AUTHENTICATION_REQUIRED: 511\n};\n\n// src/router.ts\nvar createRouter = (endpoints, config) => {\n  const _endpoints = Object.values(endpoints);\n  const router = (0,rou3__WEBPACK_IMPORTED_MODULE_2__.createRouter)();\n  for (const endpoint of _endpoints) {\n    if (endpoint.options.metadata?.SERVER_ONLY) continue;\n    if (Array.isArray(endpoint.options?.method)) {\n      for (const method of endpoint.options.method) {\n        (0,rou3__WEBPACK_IMPORTED_MODULE_2__.addRoute)(router, method, endpoint.path, endpoint);\n      }\n    } else {\n      (0,rou3__WEBPACK_IMPORTED_MODULE_2__.addRoute)(router, endpoint.options.method, endpoint.path, endpoint);\n    }\n  }\n  const middlewareRouter = (0,rou3__WEBPACK_IMPORTED_MODULE_2__.createRouter)();\n  for (const route of config?.routerMiddleware || []) {\n    (0,rou3__WEBPACK_IMPORTED_MODULE_2__.addRoute)(middlewareRouter, \"*\", route.path, route.middleware);\n  }\n  const handler = async (request) => {\n    const url = new URL(request.url);\n    let path = url.pathname;\n    if (config?.basePath) {\n      path = path.split(config.basePath)[1];\n    }\n    if (!path?.length) {\n      config?.onError?.(new APIError(\"NOT_FOUND\"));\n      console.warn(\n        `[better-call]: Make sure the URL has the basePath (${config?.basePath}).`\n      );\n      return new Response(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n    const method = request.method;\n    const route = (0,rou3__WEBPACK_IMPORTED_MODULE_2__.findRoute)(router, method, path);\n    const handler2 = route?.data;\n    const body = await getBody(request);\n    const headers = request.headers;\n    const query = Object.fromEntries(url.searchParams);\n    const routerMiddleware = (0,rou3__WEBPACK_IMPORTED_MODULE_2__.findAllRoutes)(middlewareRouter, \"*\", path);\n    if (!handler2) {\n      return new Response(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n    try {\n      let middlewareContext = {};\n      if (routerMiddleware?.length) {\n        for (const route2 of routerMiddleware) {\n          const middleware = route2.data;\n          const res = await middleware({\n            path,\n            method,\n            headers,\n            params: route2?.params,\n            request,\n            body,\n            query,\n            context: {\n              ...config?.extraContext\n            }\n          });\n          if (res instanceof Response) {\n            return res;\n          }\n          if (res?._flag === \"json\") {\n            return new Response(JSON.stringify(res), {\n              headers: res.headers\n            });\n          }\n          if (res) {\n            middlewareContext = {\n              ...res,\n              ...middlewareContext\n            };\n          }\n        }\n      }\n      const handlerRes = await handler2({\n        path,\n        method,\n        headers,\n        params: route?.params,\n        request,\n        body,\n        query,\n        _flag: \"router\",\n        context: {\n          ...middlewareContext,\n          ...config?.extraContext\n        }\n      });\n      if (handlerRes instanceof Response) {\n        return handlerRes;\n      }\n      const resBody = shouldSerialize(handlerRes) ? JSON.stringify(handlerRes) : handlerRes;\n      return new Response(resBody, {\n        headers: handler2.headers\n      });\n    } catch (e) {\n      if (config?.onError) {\n        const onErrorRes = await config.onError(e);\n        if (onErrorRes instanceof Response) {\n          return onErrorRes;\n        }\n      }\n      if (e instanceof APIError) {\n        return new Response(e.body ? JSON.stringify(e.body) : null, {\n          status: statusCode[e.status],\n          statusText: e.status,\n          headers: e.headers\n        });\n      }\n      if (config?.throwError) {\n        throw e;\n      }\n      return new Response(null, {\n        status: 500,\n        statusText: \"Internal Server Error\"\n      });\n    }\n  };\n  return {\n    handler: async (request) => {\n      const onReq = await config?.onRequest?.(request);\n      if (onReq instanceof Response) {\n        return onReq;\n      }\n      const req = onReq instanceof Request ? onReq : request;\n      const res = await handler(req);\n      const onRes = await config?.onResponse?.(res);\n      if (onRes instanceof Response) {\n        return onRes;\n      }\n      return res;\n    },\n    endpoints\n  };\n};\n\n// src/middleware.ts\nfunction createMiddleware(optionsOrHandler, handler) {\n  if (typeof optionsOrHandler === \"function\") {\n    return createEndpoint(\n      \"*\",\n      {\n        method: \"*\"\n      },\n      optionsOrHandler\n    );\n  }\n  if (!handler) {\n    throw new Error(\"Middleware handler is required\");\n  }\n  const endpoint = createEndpoint(\n    \"*\",\n    {\n      ...optionsOrHandler,\n      method: \"*\"\n    },\n    handler\n  );\n  return endpoint;\n}\nvar createMiddlewareCreator = (opts) => {\n  function fn(optionsOrHandler, handler) {\n    if (typeof optionsOrHandler === \"function\") {\n      return createEndpoint(\n        \"*\",\n        {\n          method: \"*\"\n        },\n        optionsOrHandler\n      );\n    }\n    if (!handler) {\n      throw new Error(\"Middleware handler is required\");\n    }\n    const endpoint = createEndpoint(\n      \"*\",\n      {\n        ...optionsOrHandler,\n        method: \"*\"\n      },\n      handler\n    );\n    return endpoint;\n  }\n  return fn;\n};\n\n// src/types.ts\n\n\n// src/adapter/request.ts\nvar set_cookie_parser = __toESM(require_set_cookie(), 1);\nfunction get_raw_body(req, body_size_limit) {\n  const h = req.headers;\n  if (!h[\"content-type\"]) return null;\n  const content_length = Number(h[\"content-length\"]);\n  if (req.httpVersionMajor === 1 && isNaN(content_length) && h[\"transfer-encoding\"] == null || content_length === 0) {\n    return null;\n  }\n  let length = content_length;\n  if (body_size_limit) {\n    if (!length) {\n      length = body_size_limit;\n    } else if (length > body_size_limit) {\n      throw Error(\n        `Received content-length of ${length}, but only accept up to ${body_size_limit} bytes.`\n      );\n    }\n  }\n  if (req.destroyed) {\n    const readable = new ReadableStream();\n    readable.cancel();\n    return readable;\n  }\n  let size = 0;\n  let cancelled = false;\n  return new ReadableStream({\n    start(controller) {\n      req.on(\"error\", (error) => {\n        cancelled = true;\n        controller.error(error);\n      });\n      req.on(\"end\", () => {\n        if (cancelled) return;\n        controller.close();\n      });\n      req.on(\"data\", (chunk) => {\n        if (cancelled) return;\n        size += chunk.length;\n        if (size > length) {\n          cancelled = true;\n          controller.error(\n            new Error(\n              `request body size exceeded ${content_length ? \"'content-length'\" : \"BODY_SIZE_LIMIT\"} of ${length}`\n            )\n          );\n          return;\n        }\n        controller.enqueue(chunk);\n        if (controller.desiredSize === null || controller.desiredSize <= 0) {\n          req.pause();\n        }\n      });\n    },\n    pull() {\n      req.resume();\n    },\n    cancel(reason) {\n      cancelled = true;\n      req.destroy(reason);\n    }\n  });\n}\nfunction getRequest({\n  request,\n  base,\n  bodySizeLimit\n}) {\n  return new Request(base + request.url, {\n    // @ts-expect-error\n    duplex: \"half\",\n    method: request.method,\n    body: get_raw_body(request, bodySizeLimit),\n    headers: request.headers\n  });\n}\nasync function setResponse(res, response) {\n  for (const [key, value] of response.headers) {\n    try {\n      res.setHeader(\n        key,\n        key === \"set-cookie\" ? set_cookie_parser.splitCookiesString(response.headers.get(key)) : value\n      );\n    } catch (error) {\n      res.getHeaderNames().forEach((name) => res.removeHeader(name));\n      res.writeHead(500).end(String(error));\n      return;\n    }\n  }\n  res.writeHead(response.status);\n  if (!response.body) {\n    res.end();\n    return;\n  }\n  if (response.body.locked) {\n    res.end(\n      \"Fatal error: Response body is locked. This can happen when the response was already read (for example through 'response.json()' or 'response.text()').\"\n    );\n    return;\n  }\n  const reader = response.body.getReader();\n  if (res.destroyed) {\n    reader.cancel();\n    return;\n  }\n  const cancel = (error) => {\n    res.off(\"close\", cancel);\n    res.off(\"error\", cancel);\n    reader.cancel(error).catch(() => {\n    });\n    if (error) res.destroy(error);\n  };\n  res.on(\"close\", cancel);\n  res.on(\"error\", cancel);\n  next();\n  async function next() {\n    try {\n      for (; ; ) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        if (!res.write(value)) {\n          res.once(\"drain\", next);\n          return;\n        }\n      }\n      res.end();\n    } catch (error) {\n      cancel(error instanceof Error ? error : new Error(String(error)));\n    }\n  }\n}\n\n// src/adapter/node.ts\nfunction toNodeHandler(handler) {\n  return async (req, res) => {\n    const protocol = req.headers[\"x-forwarded-proto\"] || (req.socket.encrypted ? \"https\" : \"http\");\n    const base = `${protocol}://${req.headers[\":authority\"] || req.headers.host}`;\n    const response = await handler(getRequest({ base, request: req }));\n    setResponse(res, response);\n  };\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/better-call@0.3.3/node_modules/better-call/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/better-call@0.3.3/node_modules/better-call/dist/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-call@0.3.3/node_modules/better-call/dist/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   createEndpoint: () => (/* binding */ createEndpoint),\n/* harmony export */   createEndpointCreator: () => (/* binding */ createEndpointCreator),\n/* harmony export */   createMiddleware: () => (/* binding */ createMiddleware),\n/* harmony export */   createMiddlewareCreator: () => (/* binding */ createMiddlewareCreator),\n/* harmony export */   createRouter: () => (/* binding */ createRouter),\n/* harmony export */   getBody: () => (/* binding */ getBody),\n/* harmony export */   getCookie: () => (/* binding */ getCookie),\n/* harmony export */   getRequest: () => (/* binding */ getRequest),\n/* harmony export */   getSignedCookie: () => (/* binding */ getSignedCookie),\n/* harmony export */   json: () => (/* binding */ json),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseSigned: () => (/* binding */ parseSigned),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializeSigned: () => (/* binding */ serializeSigned),\n/* harmony export */   setCookie: () => (/* binding */ setCookie),\n/* harmony export */   setResponse: () => (/* binding */ setResponse),\n/* harmony export */   setSignedCookie: () => (/* binding */ setSignedCookie),\n/* harmony export */   shouldSerialize: () => (/* binding */ shouldSerialize),\n/* harmony export */   signCookieValue: () => (/* binding */ signCookieValue),\n/* harmony export */   statusCode: () => (/* binding */ statusCode),\n/* harmony export */   toNodeHandler: () => (/* binding */ toNodeHandler)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/.pnpm/zod@3.25.64/node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var uncrypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uncrypto */ \"(rsc)/./node_modules/.pnpm/uncrypto@0.1.3/node_modules/uncrypto/dist/crypto.node.mjs\");\n/* harmony import */ var rou3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rou3 */ \"(rsc)/./node_modules/.pnpm/rou3@0.5.1/node_modules/rou3/dist/index.mjs\");\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// node_modules/set-cookie-parser/lib/set-cookie.js\nvar require_set_cookie = __commonJS({\n  \"node_modules/set-cookie-parser/lib/set-cookie.js\"(exports, module) {\n    \"use strict\";\n    var defaultParseOptions = {\n      decodeValues: true,\n      map: false,\n      silent: false\n    };\n    function isNonEmptyString(str) {\n      return typeof str === \"string\" && !!str.trim();\n    }\n    function parseString(setCookieValue, options) {\n      var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n      var nameValuePairStr = parts.shift();\n      var parsed = parseNameValuePair(nameValuePairStr);\n      var name = parsed.name;\n      var value = parsed.value;\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      try {\n        value = options.decodeValues ? decodeURIComponent(value) : value;\n      } catch (e) {\n        console.error(\n          \"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\",\n          e\n        );\n      }\n      var cookie = {\n        name,\n        value\n      };\n      parts.forEach(function(part) {\n        var sides = part.split(\"=\");\n        var key = sides.shift().trimLeft().toLowerCase();\n        var value2 = sides.join(\"=\");\n        if (key === \"expires\") {\n          cookie.expires = new Date(value2);\n        } else if (key === \"max-age\") {\n          cookie.maxAge = parseInt(value2, 10);\n        } else if (key === \"secure\") {\n          cookie.secure = true;\n        } else if (key === \"httponly\") {\n          cookie.httpOnly = true;\n        } else if (key === \"samesite\") {\n          cookie.sameSite = value2;\n        } else if (key === \"partitioned\") {\n          cookie.partitioned = true;\n        } else {\n          cookie[key] = value2;\n        }\n      });\n      return cookie;\n    }\n    function parseNameValuePair(nameValuePairStr) {\n      var name = \"\";\n      var value = \"\";\n      var nameValueArr = nameValuePairStr.split(\"=\");\n      if (nameValueArr.length > 1) {\n        name = nameValueArr.shift();\n        value = nameValueArr.join(\"=\");\n      } else {\n        value = nameValuePairStr;\n      }\n      return { name, value };\n    }\n    function parse2(input, options) {\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      if (!input) {\n        if (!options.map) {\n          return [];\n        } else {\n          return {};\n        }\n      }\n      if (input.headers) {\n        if (typeof input.headers.getSetCookie === \"function\") {\n          input = input.headers.getSetCookie();\n        } else if (input.headers[\"set-cookie\"]) {\n          input = input.headers[\"set-cookie\"];\n        } else {\n          var sch = input.headers[Object.keys(input.headers).find(function(key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })];\n          if (!sch && input.headers.cookie && !options.silent) {\n            console.warn(\n              \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n            );\n          }\n          input = sch;\n        }\n      }\n      if (!Array.isArray(input)) {\n        input = [input];\n      }\n      if (!options.map) {\n        return input.filter(isNonEmptyString).map(function(str) {\n          return parseString(str, options);\n        });\n      } else {\n        var cookies = {};\n        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {\n          var cookie = parseString(str, options);\n          cookies2[cookie.name] = cookie;\n          return cookies2;\n        }, cookies);\n      }\n    }\n    function splitCookiesString2(cookiesString) {\n      if (Array.isArray(cookiesString)) {\n        return cookiesString;\n      }\n      if (typeof cookiesString !== \"string\") {\n        return [];\n      }\n      var cookiesStrings = [];\n      var pos = 0;\n      var start;\n      var ch;\n      var lastComma;\n      var nextStart;\n      var cookiesSeparatorFound;\n      function skipWhitespace() {\n        while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n          pos += 1;\n        }\n        return pos < cookiesString.length;\n      }\n      function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n      }\n      while (pos < cookiesString.length) {\n        start = pos;\n        cookiesSeparatorFound = false;\n        while (skipWhitespace()) {\n          ch = cookiesString.charAt(pos);\n          if (ch === \",\") {\n            lastComma = pos;\n            pos += 1;\n            skipWhitespace();\n            nextStart = pos;\n            while (pos < cookiesString.length && notSpecialChar()) {\n              pos += 1;\n            }\n            if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n              cookiesSeparatorFound = true;\n              pos = nextStart;\n              cookiesStrings.push(cookiesString.substring(start, lastComma));\n              start = pos;\n            } else {\n              pos = lastComma + 1;\n            }\n          } else {\n            pos += 1;\n          }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n      }\n      return cookiesStrings;\n    }\n    module.exports = parse2;\n    module.exports.parse = parse2;\n    module.exports.parseString = parseString;\n    module.exports.splitCookiesString = splitCookiesString2;\n  }\n});\n\n// src/endpoint.ts\n\n\n// src/error.ts\nvar APIError = class extends Error {\n  constructor(status, body, headers) {\n    super(`API Error: ${status} ${body?.message ?? \"\"}`, {\n      cause: body\n    });\n    __publicField(this, \"status\");\n    __publicField(this, \"headers\");\n    __publicField(this, \"body\");\n    this.status = status;\n    this.body = body ?? {};\n    this.body.code = body?.message ? body.message.toUpperCase().replace(/ /g, \"_\").replace(/[^A-Z0-9_]/g, \"\") : status;\n    this.stack = \"\";\n    this.headers = headers ?? new Headers();\n    if (!this.headers.has(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json\");\n    }\n    this.name = \"BetterCallAPIError\";\n  }\n};\n\n// src/helper.ts\nvar json = (body, option) => {\n  return {\n    response: {\n      body: option?.body ?? body,\n      status: option?.status ?? 200,\n      statusText: option?.statusText ?? \"OK\",\n      headers: option?.headers\n    },\n    body,\n    _flag: \"json\"\n  };\n};\n\n// src/cookie.ts\n\nvar algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\nvar getCryptoKey = async (secret) => {\n  const secretBuf = typeof secret === \"string\" ? new TextEncoder().encode(secret) : secret;\n  return await uncrypto__WEBPACK_IMPORTED_MODULE_1__.subtle.importKey(\"raw\", secretBuf, algorithm, false, [\"sign\", \"verify\"]);\n};\nvar makeSignature = async (value, secret) => {\n  const key = await getCryptoKey(secret);\n  const signature = await uncrypto__WEBPACK_IMPORTED_MODULE_1__.subtle.sign(algorithm.name, key, new TextEncoder().encode(value));\n  return btoa(String.fromCharCode(...new Uint8Array(signature)));\n};\nvar verifySignature = async (base64Signature, value, secret) => {\n  try {\n    const signatureBinStr = atob(base64Signature);\n    const signature = new Uint8Array(signatureBinStr.length);\n    for (let i = 0, len = signatureBinStr.length; i < len; i++) {\n      signature[i] = signatureBinStr.charCodeAt(i);\n    }\n    return await uncrypto__WEBPACK_IMPORTED_MODULE_1__.subtle.verify(algorithm, secret, signature, new TextEncoder().encode(value));\n  } catch (e) {\n    return false;\n  }\n};\nvar validCookieNameRegEx = /^[\\w!#$%&'*.^`|~+-]+$/;\nvar validCookieValueRegEx = /^[ !#-:<-[\\]-~]*$/;\nvar parse = (cookie, name) => {\n  const pairs = cookie.trim().split(\";\");\n  return pairs.reduce((parsedCookie, pairStr) => {\n    pairStr = pairStr.trim();\n    const valueStartPos = pairStr.indexOf(\"=\");\n    if (valueStartPos === -1) {\n      return parsedCookie;\n    }\n    const cookieName = pairStr.substring(0, valueStartPos).trim();\n    if (name && name !== cookieName || !validCookieNameRegEx.test(cookieName)) {\n      return parsedCookie;\n    }\n    let cookieValue = pairStr.substring(valueStartPos + 1).trim();\n    if (cookieValue.startsWith('\"') && cookieValue.endsWith('\"')) {\n      cookieValue = cookieValue.slice(1, -1);\n    }\n    if (validCookieValueRegEx.test(cookieValue)) {\n      parsedCookie[cookieName] = decodeURIComponent(cookieValue);\n    }\n    return parsedCookie;\n  }, {});\n};\nvar parseSigned = async (cookie, secret, name) => {\n  const parsedCookie = {};\n  const secretKey = await getCryptoKey(secret);\n  for (const [key, value] of Object.entries(parse(cookie, name))) {\n    const signatureStartPos = value.lastIndexOf(\".\");\n    if (signatureStartPos < 1) {\n      continue;\n    }\n    const signedValue = value.substring(0, signatureStartPos);\n    const signature = value.substring(signatureStartPos + 1);\n    if (signature.length !== 44 || !signature.endsWith(\"=\")) {\n      continue;\n    }\n    const isVerified = await verifySignature(signature, signedValue, secretKey);\n    parsedCookie[key] = isVerified ? signedValue : false;\n  }\n  return parsedCookie;\n};\nvar _serialize = (name, value, opt = {}) => {\n  let cookie = `${name}=${value}`;\n  if (name.startsWith(\"__Secure-\") && !opt.secure) {\n    opt.secure = true;\n  }\n  if (name.startsWith(\"__Host-\")) {\n    if (!opt.secure) {\n      opt.secure = true;\n    }\n    if (opt.path !== \"/\") {\n      opt.path = \"/\";\n    }\n    if (opt.domain) {\n      opt.domain = void 0;\n    }\n  }\n  if (opt && typeof opt.maxAge === \"number\" && opt.maxAge >= 0) {\n    if (opt.maxAge > 3456e4) {\n      throw new Error(\n        \"Cookies Max-Age SHOULD NOT be greater than 400 days (34560000 seconds) in duration.\"\n      );\n    }\n    cookie += `; Max-Age=${Math.floor(opt.maxAge)}`;\n  }\n  if (opt.domain && opt.prefix !== \"host\") {\n    cookie += `; Domain=${opt.domain}`;\n  }\n  if (opt.path) {\n    cookie += `; Path=${opt.path}`;\n  }\n  if (opt.expires) {\n    if (opt.expires.getTime() - Date.now() > 3456e7) {\n      throw new Error(\n        \"Cookies Expires SHOULD NOT be greater than 400 days (34560000 seconds) in the future.\"\n      );\n    }\n    cookie += `; Expires=${opt.expires.toUTCString()}`;\n  }\n  if (opt.httpOnly) {\n    cookie += \"; HttpOnly\";\n  }\n  if (opt.secure) {\n    cookie += \"; Secure\";\n  }\n  if (opt.sameSite) {\n    cookie += `; SameSite=${opt.sameSite.charAt(0).toUpperCase() + opt.sameSite.slice(1)}`;\n  }\n  if (opt.partitioned) {\n    if (!opt.secure) {\n      throw new Error(\"Partitioned Cookie must have Secure attributes\");\n    }\n    cookie += \"; Partitioned\";\n  }\n  return cookie;\n};\nvar serialize = (name, value, opt) => {\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nvar serializeSigned = async (name, value, secret, opt = {}) => {\n  const signature = await makeSignature(value, secret);\n  value = `${value}.${signature}`;\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nvar signCookieValue = async (value, secret) => {\n  const signature = await makeSignature(value, secret);\n  value = `${value}.${signature}`;\n  value = encodeURIComponent(value);\n  return value;\n};\n\n// src/cookie-utils.ts\nvar getCookie = (cookie, key, prefix) => {\n  if (!cookie) {\n    return void 0;\n  }\n  let finalKey = key;\n  if (prefix) {\n    if (prefix === \"secure\") {\n      finalKey = \"__Secure-\" + key;\n    } else if (prefix === \"host\") {\n      finalKey = \"__Host-\" + key;\n    } else {\n      return void 0;\n    }\n  }\n  const obj = parse(cookie, finalKey);\n  return obj[finalKey];\n};\nvar setCookie = (header, name, value, opt) => {\n  const existingCookies = header.get(\"Set-Cookie\");\n  if (existingCookies) {\n    const cookies = existingCookies.split(\", \");\n    const updatedCookies = cookies.filter((cookie2) => !cookie2.startsWith(`${name}=`));\n    header.delete(\"Set-Cookie\");\n    updatedCookies.forEach((cookie2) => header.append(\"Set-Cookie\", cookie2));\n  }\n  let cookie;\n  if (opt?.prefix === \"secure\") {\n    cookie = serialize(\"__Secure-\" + name, value, { path: \"/\", ...opt, secure: true });\n  } else if (opt?.prefix === \"host\") {\n    cookie = serialize(\"__Host-\" + name, value, {\n      ...opt,\n      path: \"/\",\n      secure: true,\n      domain: void 0\n    });\n  } else {\n    cookie = serialize(name, value, { path: \"/\", ...opt });\n  }\n  header.append(\"Set-Cookie\", cookie);\n};\nvar setSignedCookie = async (header, name, value, secret, opt) => {\n  let cookie;\n  if (opt?.prefix === \"secure\") {\n    cookie = await serializeSigned(\"__Secure-\" + name, value, secret, {\n      path: \"/\",\n      ...opt,\n      secure: true\n    });\n  } else if (opt?.prefix === \"host\") {\n    cookie = await serializeSigned(\"__Host-\" + name, value, secret, {\n      ...opt,\n      path: \"/\",\n      secure: true,\n      domain: void 0\n    });\n  } else {\n    cookie = await serializeSigned(name, value, secret, { path: \"/\", ...opt });\n  }\n  header.append(\"Set-Cookie\", cookie);\n};\nvar getSignedCookie = async (header, secret, key, prefix) => {\n  const cookie = header.get(\"cookie\");\n  if (!cookie) {\n    return void 0;\n  }\n  let finalKey = key;\n  if (prefix) {\n    if (prefix === \"secure\") {\n      finalKey = \"__Secure-\" + key;\n    } else if (prefix === \"host\") {\n      finalKey = \"__Host-\" + key;\n    }\n  }\n  const obj = await parseSigned(cookie, secret, finalKey);\n  return obj[finalKey];\n};\n\n// src/endpoint.ts\nfunction createEndpointCreator(opts) {\n  return (path, options, handler) => {\n    return createEndpoint(\n      path,\n      {\n        ...options,\n        use: [...options?.use || [], ...opts?.use || []]\n      },\n      handler\n    );\n  };\n}\nfunction createEndpoint(path, options, handler) {\n  let responseHeader = new Headers();\n  const handle = async (...ctx) => {\n    let internalCtx = {\n      setHeader(key, value) {\n        responseHeader.set(key, value);\n      },\n      setCookie(key, value, options2) {\n        setCookie(responseHeader, key, value, options2);\n      },\n      getCookie(key, prefix) {\n        const header = ctx[0]?.headers;\n        const cookieH = header?.get(\"cookie\");\n        const cookie = getCookie(cookieH || \"\", key, prefix);\n        return cookie;\n      },\n      getSignedCookie(key, secret, prefix) {\n        const header = ctx[0]?.headers;\n        if (!header) {\n          throw new TypeError(\"Headers are required\");\n        }\n        const cookie = getSignedCookie(header, secret, key, prefix);\n        return cookie;\n      },\n      async setSignedCookie(key, value, secret, options2) {\n        await setSignedCookie(responseHeader, key, value, secret, options2);\n      },\n      redirect(url) {\n        responseHeader.set(\"Location\", url);\n        return new APIError(\"FOUND\");\n      },\n      json,\n      context: ctx[0]?.context || {},\n      _flag: ctx[0]?.asResponse ? \"router\" : ctx[0]?._flag,\n      responseHeader,\n      path,\n      ...ctx[0] || {}\n    };\n    if (options.use?.length) {\n      let middlewareContexts = {};\n      let middlewareBody = {};\n      for (const middleware of options.use) {\n        if (typeof middleware !== \"function\") {\n          console.warn(\"Middleware is not a function\", {\n            middleware\n          });\n          continue;\n        }\n        const res = await middleware(internalCtx);\n        if (res) {\n          const body = res.options?.body ? res.options.body.parse(internalCtx.body) : void 0;\n          middlewareContexts = {\n            ...middlewareContexts,\n            ...res\n          };\n          middlewareBody = {\n            ...middlewareBody,\n            ...body\n          };\n        }\n      }\n      internalCtx = {\n        ...internalCtx,\n        body: {\n          ...middlewareBody,\n          ...internalCtx.body\n        },\n        context: {\n          ...internalCtx.context || {},\n          ...middlewareContexts\n        }\n      };\n    }\n    try {\n      const body = options.body ? options.body.parse(internalCtx.body) : internalCtx.body;\n      internalCtx = {\n        ...internalCtx,\n        body: body ? {\n          ...body,\n          ...internalCtx.body\n        } : internalCtx.body\n      };\n      internalCtx.query = options.query ? options.query.parse(internalCtx.query) : internalCtx.query;\n    } catch (e) {\n      if (e instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodError) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: e.message,\n          details: e.errors\n        });\n      }\n      throw e;\n    }\n    if (options.requireHeaders && !internalCtx.headers) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Headers are required\"\n      });\n    }\n    if (options.requireRequest && !internalCtx.request) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Request is required\"\n      });\n    }\n    if (internalCtx.request && !internalCtx.headers) {\n      internalCtx.headers = internalCtx.request.headers;\n    }\n    try {\n      let res = await handler(internalCtx);\n      let actualResponse = res;\n      if (res && typeof res === \"object\" && \"_flag\" in res) {\n        if (res._flag === \"json\" && internalCtx._flag === \"router\") {\n          const h = res.response.headers;\n          Object.keys(h || {}).forEach((key) => {\n            responseHeader.set(key, h[key]);\n          });\n          responseHeader.set(\"Content-Type\", \"application/json\");\n          actualResponse = new Response(JSON.stringify(res.response.body), {\n            status: res.response.status ?? 200,\n            statusText: res.response.statusText,\n            headers: responseHeader\n          });\n        } else {\n          actualResponse = res.body;\n        }\n      }\n      responseHeader = new Headers();\n      return actualResponse;\n    } catch (e) {\n      if (e instanceof APIError) {\n        responseHeader.set(\"Content-Type\", \"application/json\");\n        e.headers = responseHeader;\n        responseHeader = new Headers();\n        throw e;\n      }\n      throw e;\n    }\n  };\n  handle.path = path;\n  handle.options = options;\n  handle.method = options.method;\n  handle.headers = responseHeader;\n  return handle;\n}\n\n// src/router.ts\n\n\n// src/utils.ts\nasync function getBody(request) {\n  const contentType = request.headers.get(\"content-type\") || \"\";\n  if (!request.body) {\n    return void 0;\n  }\n  if (contentType.includes(\"application/json\")) {\n    return await request.json();\n  }\n  if (contentType.includes(\"application/x-www-form-urlencoded\")) {\n    const formData = await request.formData();\n    const result = {};\n    formData.forEach((value, key) => {\n      result[key] = value.toString();\n    });\n    return result;\n  }\n  if (contentType.includes(\"multipart/form-data\")) {\n    const formData = await request.formData();\n    const result = {};\n    formData.forEach((value, key) => {\n      result[key] = value;\n    });\n    return result;\n  }\n  if (contentType.includes(\"text/plain\")) {\n    return await request.text();\n  }\n  if (contentType.includes(\"application/octet-stream\")) {\n    return await request.arrayBuffer();\n  }\n  if (contentType.includes(\"application/pdf\") || contentType.includes(\"image/\") || contentType.includes(\"video/\")) {\n    const blob = await request.blob();\n    return blob;\n  }\n  if (contentType.includes(\"application/stream\") || request.body instanceof ReadableStream) {\n    return request.body;\n  }\n  return await request.text();\n}\nfunction shouldSerialize(body) {\n  return typeof body === \"object\" && body !== null && !(body instanceof Blob) && !(body instanceof FormData);\n}\nvar statusCode = {\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NO_CONTENT: 204,\n  MULTIPLE_CHOICES: 300,\n  MOVED_PERMANENTLY: 301,\n  FOUND: 302,\n  SEE_OTHER: 303,\n  NOT_MODIFIED: 304,\n  TEMPORARY_REDIRECT: 307,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  PAYMENT_REQUIRED: 402,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  METHOD_NOT_ALLOWED: 405,\n  NOT_ACCEPTABLE: 406,\n  PROXY_AUTHENTICATION_REQUIRED: 407,\n  REQUEST_TIMEOUT: 408,\n  CONFLICT: 409,\n  GONE: 410,\n  LENGTH_REQUIRED: 411,\n  PRECONDITION_FAILED: 412,\n  PAYLOAD_TOO_LARGE: 413,\n  URI_TOO_LONG: 414,\n  UNSUPPORTED_MEDIA_TYPE: 415,\n  RANGE_NOT_SATISFIABLE: 416,\n  EXPECTATION_FAILED: 417,\n  \"I'M_A_TEAPOT\": 418,\n  MISDIRECTED_REQUEST: 421,\n  UNPROCESSABLE_ENTITY: 422,\n  LOCKED: 423,\n  FAILED_DEPENDENCY: 424,\n  TOO_EARLY: 425,\n  UPGRADE_REQUIRED: 426,\n  PRECONDITION_REQUIRED: 428,\n  TOO_MANY_REQUESTS: 429,\n  REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n  UNAVAILABLE_FOR_LEGAL_REASONS: 451,\n  INTERNAL_SERVER_ERROR: 500,\n  NOT_IMPLEMENTED: 501,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504,\n  HTTP_VERSION_NOT_SUPPORTED: 505,\n  VARIANT_ALSO_NEGOTIATES: 506,\n  INSUFFICIENT_STORAGE: 507,\n  LOOP_DETECTED: 508,\n  NOT_EXTENDED: 510,\n  NETWORK_AUTHENTICATION_REQUIRED: 511\n};\n\n// src/router.ts\nvar createRouter = (endpoints, config) => {\n  const _endpoints = Object.values(endpoints);\n  const router = (0,rou3__WEBPACK_IMPORTED_MODULE_2__.createRouter)();\n  for (const endpoint of _endpoints) {\n    if (endpoint.options.metadata?.SERVER_ONLY) continue;\n    if (Array.isArray(endpoint.options?.method)) {\n      for (const method of endpoint.options.method) {\n        (0,rou3__WEBPACK_IMPORTED_MODULE_2__.addRoute)(router, method, endpoint.path, endpoint);\n      }\n    } else {\n      (0,rou3__WEBPACK_IMPORTED_MODULE_2__.addRoute)(router, endpoint.options.method, endpoint.path, endpoint);\n    }\n  }\n  const middlewareRouter = (0,rou3__WEBPACK_IMPORTED_MODULE_2__.createRouter)();\n  for (const route of config?.routerMiddleware || []) {\n    (0,rou3__WEBPACK_IMPORTED_MODULE_2__.addRoute)(middlewareRouter, \"*\", route.path, route.middleware);\n  }\n  const handler = async (request) => {\n    const url = new URL(request.url);\n    let path = url.pathname;\n    if (config?.basePath) {\n      path = path.split(config.basePath)[1];\n    }\n    if (!path?.length) {\n      config?.onError?.(new APIError(\"NOT_FOUND\"));\n      console.warn(\n        `[better-call]: Make sure the URL has the basePath (${config?.basePath}).`\n      );\n      return new Response(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n    const method = request.method;\n    const route = (0,rou3__WEBPACK_IMPORTED_MODULE_2__.findRoute)(router, method, path);\n    const handler2 = route?.data;\n    const body = await getBody(request);\n    const headers = request.headers;\n    const query = Object.fromEntries(url.searchParams);\n    const routerMiddleware = (0,rou3__WEBPACK_IMPORTED_MODULE_2__.findAllRoutes)(middlewareRouter, \"*\", path);\n    if (!handler2) {\n      return new Response(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n    try {\n      let middlewareContext = {};\n      if (routerMiddleware?.length) {\n        for (const route2 of routerMiddleware) {\n          const middleware = route2.data;\n          const res = await middleware({\n            path,\n            method,\n            headers,\n            params: route2?.params,\n            request,\n            body,\n            query,\n            context: {\n              ...config?.extraContext\n            }\n          });\n          if (res instanceof Response) {\n            return res;\n          }\n          if (res?._flag === \"json\") {\n            return new Response(JSON.stringify(res), {\n              headers: res.headers\n            });\n          }\n          if (res) {\n            middlewareContext = {\n              ...res,\n              ...middlewareContext\n            };\n          }\n        }\n      }\n      const handlerRes = await handler2({\n        path,\n        method,\n        headers,\n        params: route?.params,\n        request,\n        body,\n        query,\n        _flag: \"router\",\n        context: {\n          ...middlewareContext,\n          ...config?.extraContext\n        }\n      });\n      if (handlerRes instanceof Response) {\n        return handlerRes;\n      }\n      const resBody = shouldSerialize(handlerRes) ? JSON.stringify(handlerRes) : handlerRes;\n      return new Response(resBody, {\n        headers: handler2.headers\n      });\n    } catch (e) {\n      if (config?.onError) {\n        const onErrorRes = await config.onError(e);\n        if (onErrorRes instanceof Response) {\n          return onErrorRes;\n        }\n      }\n      if (e instanceof APIError) {\n        return new Response(e.body ? JSON.stringify(e.body) : null, {\n          status: statusCode[e.status],\n          statusText: e.status,\n          headers: e.headers\n        });\n      }\n      if (config?.throwError) {\n        throw e;\n      }\n      return new Response(null, {\n        status: 500,\n        statusText: \"Internal Server Error\"\n      });\n    }\n  };\n  return {\n    handler: async (request) => {\n      const onReq = await config?.onRequest?.(request);\n      if (onReq instanceof Response) {\n        return onReq;\n      }\n      const req = onReq instanceof Request ? onReq : request;\n      const res = await handler(req);\n      const onRes = await config?.onResponse?.(res);\n      if (onRes instanceof Response) {\n        return onRes;\n      }\n      return res;\n    },\n    endpoints\n  };\n};\n\n// src/middleware.ts\nfunction createMiddleware(optionsOrHandler, handler) {\n  if (typeof optionsOrHandler === \"function\") {\n    return createEndpoint(\n      \"*\",\n      {\n        method: \"*\"\n      },\n      optionsOrHandler\n    );\n  }\n  if (!handler) {\n    throw new Error(\"Middleware handler is required\");\n  }\n  const endpoint = createEndpoint(\n    \"*\",\n    {\n      ...optionsOrHandler,\n      method: \"*\"\n    },\n    handler\n  );\n  return endpoint;\n}\nvar createMiddlewareCreator = (opts) => {\n  function fn(optionsOrHandler, handler) {\n    if (typeof optionsOrHandler === \"function\") {\n      return createEndpoint(\n        \"*\",\n        {\n          method: \"*\"\n        },\n        optionsOrHandler\n      );\n    }\n    if (!handler) {\n      throw new Error(\"Middleware handler is required\");\n    }\n    const endpoint = createEndpoint(\n      \"*\",\n      {\n        ...optionsOrHandler,\n        method: \"*\"\n      },\n      handler\n    );\n    return endpoint;\n  }\n  return fn;\n};\n\n// src/types.ts\n\n\n// src/adapter/request.ts\nvar set_cookie_parser = __toESM(require_set_cookie(), 1);\nfunction get_raw_body(req, body_size_limit) {\n  const h = req.headers;\n  if (!h[\"content-type\"]) return null;\n  const content_length = Number(h[\"content-length\"]);\n  if (req.httpVersionMajor === 1 && isNaN(content_length) && h[\"transfer-encoding\"] == null || content_length === 0) {\n    return null;\n  }\n  let length = content_length;\n  if (body_size_limit) {\n    if (!length) {\n      length = body_size_limit;\n    } else if (length > body_size_limit) {\n      throw Error(\n        `Received content-length of ${length}, but only accept up to ${body_size_limit} bytes.`\n      );\n    }\n  }\n  if (req.destroyed) {\n    const readable = new ReadableStream();\n    readable.cancel();\n    return readable;\n  }\n  let size = 0;\n  let cancelled = false;\n  return new ReadableStream({\n    start(controller) {\n      req.on(\"error\", (error) => {\n        cancelled = true;\n        controller.error(error);\n      });\n      req.on(\"end\", () => {\n        if (cancelled) return;\n        controller.close();\n      });\n      req.on(\"data\", (chunk) => {\n        if (cancelled) return;\n        size += chunk.length;\n        if (size > length) {\n          cancelled = true;\n          controller.error(\n            new Error(\n              `request body size exceeded ${content_length ? \"'content-length'\" : \"BODY_SIZE_LIMIT\"} of ${length}`\n            )\n          );\n          return;\n        }\n        controller.enqueue(chunk);\n        if (controller.desiredSize === null || controller.desiredSize <= 0) {\n          req.pause();\n        }\n      });\n    },\n    pull() {\n      req.resume();\n    },\n    cancel(reason) {\n      cancelled = true;\n      req.destroy(reason);\n    }\n  });\n}\nfunction getRequest({\n  request,\n  base,\n  bodySizeLimit\n}) {\n  return new Request(base + request.url, {\n    // @ts-expect-error\n    duplex: \"half\",\n    method: request.method,\n    body: get_raw_body(request, bodySizeLimit),\n    headers: request.headers\n  });\n}\nasync function setResponse(res, response) {\n  for (const [key, value] of response.headers) {\n    try {\n      res.setHeader(\n        key,\n        key === \"set-cookie\" ? set_cookie_parser.splitCookiesString(response.headers.get(key)) : value\n      );\n    } catch (error) {\n      res.getHeaderNames().forEach((name) => res.removeHeader(name));\n      res.writeHead(500).end(String(error));\n      return;\n    }\n  }\n  res.writeHead(response.status);\n  if (!response.body) {\n    res.end();\n    return;\n  }\n  if (response.body.locked) {\n    res.end(\n      \"Fatal error: Response body is locked. This can happen when the response was already read (for example through 'response.json()' or 'response.text()').\"\n    );\n    return;\n  }\n  const reader = response.body.getReader();\n  if (res.destroyed) {\n    reader.cancel();\n    return;\n  }\n  const cancel = (error) => {\n    res.off(\"close\", cancel);\n    res.off(\"error\", cancel);\n    reader.cancel(error).catch(() => {\n    });\n    if (error) res.destroy(error);\n  };\n  res.on(\"close\", cancel);\n  res.on(\"error\", cancel);\n  next();\n  async function next() {\n    try {\n      for (; ; ) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        if (!res.write(value)) {\n          res.once(\"drain\", next);\n          return;\n        }\n      }\n      res.end();\n    } catch (error) {\n      cancel(error instanceof Error ? error : new Error(String(error)));\n    }\n  }\n}\n\n// src/adapter/node.ts\nfunction toNodeHandler(handler) {\n  return async (req, res) => {\n    const protocol = req.headers[\"x-forwarded-proto\"] || (req.socket.encrypted ? \"https\" : \"http\");\n    const base = `${protocol}://${req.headers[\":authority\"] || req.headers.host}`;\n    const response = await handler(getRequest({ base, request: req }));\n    setResponse(res, response);\n  };\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/better-call@0.3.3/node_modules/better-call/dist/index.js\n");

/***/ })

};
;