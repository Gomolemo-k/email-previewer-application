"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-safe-action@7.10.4_next@15.2.1_@babel+core@7.24.5_@opentelemetry+api@1.9.0_react-d_111a2a00b79115b509a93fafd3c31e2b";
exports.ids = ["vendor-chunks/next-safe-action@7.10.4_next@15.2.1_@babel+core@7.24.5_@opentelemetry+api@1.9.0_react-d_111a2a00b79115b509a93fafd3c31e2b"];
exports.modules = {

/***/ "(action-browser)/./node_modules/.pnpm/next-safe-action@7.10.4_next@15.2.1_@babel+core@7.24.5_@opentelemetry+api@1.9.0_react-d_111a2a00b79115b509a93fafd3c31e2b/node_modules/next-safe-action/dist/index.mjs":
/*!**************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next-safe-action@7.10.4_next@15.2.1_@babel+core@7.24.5_@opentelemetry+api@1.9.0_react-d_111a2a00b79115b509a93fafd3c31e2b/node_modules/next-safe-action/dist/index.mjs ***!
  \**************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionMetadataValidationError: () => (/* binding */ ActionMetadataValidationError),\n/* harmony export */   ActionOutputDataValidationError: () => (/* binding */ ActionOutputDataValidationError),\n/* harmony export */   ActionValidationError: () => (/* binding */ ActionValidationError),\n/* harmony export */   DEFAULT_SERVER_ERROR_MESSAGE: () => (/* binding */ DEFAULT_SERVER_ERROR_MESSAGE),\n/* harmony export */   createMiddleware: () => (/* binding */ createMiddleware),\n/* harmony export */   createSafeActionClient: () => (/* binding */ createSafeActionClient),\n/* harmony export */   flattenBindArgsValidationErrors: () => (/* binding */ flattenBindArgsValidationErrors),\n/* harmony export */   flattenValidationErrors: () => (/* binding */ flattenValidationErrors),\n/* harmony export */   formatBindArgsValidationErrors: () => (/* binding */ formatBindArgsValidationErrors),\n/* harmony export */   formatValidationErrors: () => (/* binding */ formatValidationErrors),\n/* harmony export */   returnValidationErrors: () => (/* binding */ returnValidationErrors)\n/* harmony export */ });\n// src/adapters/zod.ts\nvar ZodAdapter = class {\n\tasync validate(schema, data) {\n\t\tconst result = await schema.safeParseAsync(data);\n\t\tif (result.success) {\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tdata: result.data,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tissues: result.error.issues.map(({ message, path }) => ({ message, path })),\n\t\t};\n\t}\n};\nfunction zodAdapter() {\n\treturn new ZodAdapter();\n}\n\n// ../../node_modules/.pnpm/deepmerge-ts@7.1.4/node_modules/deepmerge-ts/dist/index.mjs\nvar actions = {\n\tdefaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n\tskip: Symbol(\"deepmerge-ts: skip\"),\n};\nvar actionsInto = {\n\tdefaultMerge: actions.defaultMerge,\n};\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n\treturn metaMeta;\n}\nfunction defaultFilterValues(values, meta) {\n\treturn values.filter((value) => value !== void 0);\n}\nvar ObjectType;\n(function (ObjectType2) {\n\tObjectType2[(ObjectType2[\"NOT\"] = 0)] = \"NOT\";\n\tObjectType2[(ObjectType2[\"RECORD\"] = 1)] = \"RECORD\";\n\tObjectType2[(ObjectType2[\"ARRAY\"] = 2)] = \"ARRAY\";\n\tObjectType2[(ObjectType2[\"SET\"] = 3)] = \"SET\";\n\tObjectType2[(ObjectType2[\"MAP\"] = 4)] = \"MAP\";\n\tObjectType2[(ObjectType2[\"OTHER\"] = 5)] = \"OTHER\";\n})(ObjectType || (ObjectType = {}));\nfunction getObjectType(object) {\n\tif (typeof object !== \"object\" || object === null) {\n\t\treturn 0;\n\t}\n\tif (Array.isArray(object)) {\n\t\treturn 2;\n\t}\n\tif (isRecord(object)) {\n\t\treturn 1;\n\t}\n\tif (object instanceof Set) {\n\t\treturn 3;\n\t}\n\tif (object instanceof Map) {\n\t\treturn 4;\n\t}\n\treturn 5;\n}\nfunction getKeys(objects) {\n\tconst keys = /* @__PURE__ */ new Set();\n\tfor (const object of objects) {\n\t\tfor (const key of [...Object.keys(object), ...Object.getOwnPropertySymbols(object)]) {\n\t\t\tkeys.add(key);\n\t\t}\n\t}\n\treturn keys;\n}\nfunction objectHasProperty(object, property) {\n\treturn typeof object === \"object\" && Object.prototype.propertyIsEnumerable.call(object, property);\n}\nfunction getIterableOfIterables(iterables) {\n\tlet m_iterablesIndex = 0;\n\tlet m_iterator = iterables[0]?.[Symbol.iterator]();\n\treturn {\n\t\t[Symbol.iterator]() {\n\t\t\treturn {\n\t\t\t\tnext() {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (m_iterator === void 0) {\n\t\t\t\t\t\t\treturn { done: true, value: void 0 };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst result = m_iterator.next();\n\t\t\t\t\t\tif (result.done === true) {\n\t\t\t\t\t\t\tm_iterablesIndex += 1;\n\t\t\t\t\t\t\tm_iterator = iterables[m_iterablesIndex]?.[Symbol.iterator]();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\t\tvalue: result.value,\n\t\t\t\t\t\t};\n\t\t\t\t\t} while (true);\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t};\n}\nvar validRecordToStringValues = [\"[object Object]\", \"[object Module]\"];\nfunction isRecord(value) {\n\tif (!validRecordToStringValues.includes(Object.prototype.toString.call(value))) {\n\t\treturn false;\n\t}\n\tconst { constructor } = value;\n\tif (constructor === void 0) {\n\t\treturn true;\n\t}\n\tconst prototype = constructor.prototype;\n\tif (\n\t\tprototype === null ||\n\t\ttypeof prototype !== \"object\" ||\n\t\t!validRecordToStringValues.includes(Object.prototype.toString.call(prototype))\n\t) {\n\t\treturn false;\n\t}\n\tif (!prototype.hasOwnProperty(\"isPrototypeOf\")) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nfunction mergeRecords$1(values, utils, meta) {\n\tconst result = {};\n\tfor (const key of getKeys(values)) {\n\t\tconst propValues = [];\n\t\tfor (const value of values) {\n\t\t\tif (objectHasProperty(value, key)) {\n\t\t\t\tpropValues.push(value[key]);\n\t\t\t}\n\t\t}\n\t\tif (propValues.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst updatedMeta = utils.metaDataUpdater(meta, {\n\t\t\tkey,\n\t\t\tparents: values,\n\t\t});\n\t\tconst propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n\t\tif (propertyResult === actions.skip) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (key === \"__proto__\") {\n\t\t\tObject.defineProperty(result, key, {\n\t\t\t\tvalue: propertyResult,\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\twritable: true,\n\t\t\t});\n\t\t} else {\n\t\t\tresult[key] = propertyResult;\n\t\t}\n\t}\n\treturn result;\n}\nfunction mergeArrays$1(values) {\n\treturn values.flat();\n}\nfunction mergeSets$1(values) {\n\treturn new Set(getIterableOfIterables(values));\n}\nfunction mergeMaps$1(values) {\n\treturn new Map(getIterableOfIterables(values));\n}\nfunction mergeOthers$1(values) {\n\treturn values.at(-1);\n}\nvar mergeFunctions = {\n\tmergeRecords: mergeRecords$1,\n\tmergeArrays: mergeArrays$1,\n\tmergeSets: mergeSets$1,\n\tmergeMaps: mergeMaps$1,\n\tmergeOthers: mergeOthers$1,\n};\nfunction deepmerge(...objects) {\n\treturn deepmergeCustom({})(...objects);\n}\nfunction deepmergeCustom(options, rootMetaData) {\n\tconst utils = getUtils(options, customizedDeepmerge);\n\tfunction customizedDeepmerge(...objects) {\n\t\treturn mergeUnknowns(objects, utils, rootMetaData);\n\t}\n\treturn customizedDeepmerge;\n}\nfunction getUtils(options, customizedDeepmerge) {\n\treturn {\n\t\tdefaultMergeFunctions: mergeFunctions,\n\t\tmergeFunctions: {\n\t\t\t...mergeFunctions,\n\t\t\t...Object.fromEntries(\n\t\t\t\tObject.entries(options)\n\t\t\t\t\t.filter(([key, option]) => Object.hasOwn(mergeFunctions, key))\n\t\t\t\t\t.map(([key, option]) => (option === false ? [key, mergeFunctions.mergeOthers] : [key, option]))\n\t\t\t),\n\t\t},\n\t\tmetaDataUpdater: options.metaDataUpdater ?? defaultMetaDataUpdater,\n\t\tdeepmerge: customizedDeepmerge,\n\t\tuseImplicitDefaultMerging: options.enableImplicitDefaultMerging ?? false,\n\t\tfilterValues: options.filterValues === false ? void 0 : (options.filterValues ?? defaultFilterValues),\n\t\tactions,\n\t};\n}\nfunction mergeUnknowns(values, utils, meta) {\n\tconst filteredValues = utils.filterValues?.(values, meta) ?? values;\n\tif (filteredValues.length === 0) {\n\t\treturn void 0;\n\t}\n\tif (filteredValues.length === 1) {\n\t\treturn mergeOthers(filteredValues, utils, meta);\n\t}\n\tconst type = getObjectType(filteredValues[0]);\n\tif (type !== 0 && type !== 5) {\n\t\tfor (let m_index = 1; m_index < filteredValues.length; m_index++) {\n\t\t\tif (getObjectType(filteredValues[m_index]) === type) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn mergeOthers(filteredValues, utils, meta);\n\t\t}\n\t}\n\tswitch (type) {\n\t\tcase 1: {\n\t\t\treturn mergeRecords(filteredValues, utils, meta);\n\t\t}\n\t\tcase 2: {\n\t\t\treturn mergeArrays(filteredValues, utils, meta);\n\t\t}\n\t\tcase 3: {\n\t\t\treturn mergeSets(filteredValues, utils, meta);\n\t\t}\n\t\tcase 4: {\n\t\t\treturn mergeMaps(filteredValues, utils, meta);\n\t\t}\n\t\tdefault: {\n\t\t\treturn mergeOthers(filteredValues, utils, meta);\n\t\t}\n\t}\n}\nfunction mergeRecords(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeRecords !== utils.defaultMergeFunctions.mergeRecords)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n\t}\n\treturn result;\n}\nfunction mergeArrays(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeArrays !== utils.defaultMergeFunctions.mergeArrays)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeArrays(values);\n\t}\n\treturn result;\n}\nfunction mergeSets(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeSets(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeSets(values);\n\t}\n\treturn result;\n}\nfunction mergeMaps(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeMaps(values);\n\t}\n\treturn result;\n}\nfunction mergeOthers(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeOthers !== utils.defaultMergeFunctions.mergeOthers)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeOthers(values);\n\t}\n\treturn result;\n}\n\n// src/next/errors/bailout-to-csr.ts\nvar BAILOUT_TO_CSR = \"BAILOUT_TO_CLIENT_SIDE_RENDERING\";\nfunction isBailoutToCSRError(err) {\n\tif (typeof err !== \"object\" || err === null || !(\"digest\" in err)) {\n\t\treturn false;\n\t}\n\treturn err.digest === BAILOUT_TO_CSR;\n}\n\n// src/next/errors/http-access-fallback.ts\nvar HTTPAccessErrorStatus = {\n\tNOT_FOUND: 404,\n\tFORBIDDEN: 403,\n\tUNAUTHORIZED: 401,\n};\nvar ALLOWED_CODES = new Set(Object.values(HTTPAccessErrorStatus));\nvar HTTP_ERROR_FALLBACK_ERROR_CODE = \"NEXT_HTTP_ERROR_FALLBACK\";\nfunction isHTTPAccessFallbackError(error) {\n\tif (typeof error !== \"object\" || error === null || !(\"digest\" in error) || typeof error.digest !== \"string\") {\n\t\treturn false;\n\t}\n\tconst [prefix, httpStatus] = error.digest.split(\";\");\n\treturn prefix === HTTP_ERROR_FALLBACK_ERROR_CODE && ALLOWED_CODES.has(Number(httpStatus));\n}\nfunction getAccessFallbackHTTPStatus(error) {\n\tconst httpStatus = error.digest.split(\";\")[1];\n\treturn Number(httpStatus);\n}\n\n// src/next/errors/redirect.ts\nvar RedirectStatusCode = /* @__PURE__ */ ((RedirectStatusCode2) => {\n\tRedirectStatusCode2[(RedirectStatusCode2[\"SeeOther\"] = 303)] = \"SeeOther\";\n\tRedirectStatusCode2[(RedirectStatusCode2[\"TemporaryRedirect\"] = 307)] = \"TemporaryRedirect\";\n\tRedirectStatusCode2[(RedirectStatusCode2[\"PermanentRedirect\"] = 308)] = \"PermanentRedirect\";\n\treturn RedirectStatusCode2;\n})(RedirectStatusCode || {});\nvar REDIRECT_ERROR_CODE = \"NEXT_REDIRECT\";\nfunction isRedirectError(error) {\n\tif (typeof error !== \"object\" || error === null || !(\"digest\" in error) || typeof error.digest !== \"string\") {\n\t\treturn false;\n\t}\n\tconst digest = error.digest.split(\";\");\n\tconst [errorCode, type] = digest;\n\tconst destination = digest.slice(2, -2).join(\";\");\n\tconst status = digest.at(-2);\n\tconst statusCode = Number(status);\n\treturn (\n\t\terrorCode === REDIRECT_ERROR_CODE &&\n\t\t(type === \"replace\" || type === \"push\") &&\n\t\ttypeof destination === \"string\" &&\n\t\t!isNaN(statusCode) &&\n\t\tstatusCode in RedirectStatusCode\n\t);\n}\n\n// src/next/errors/router.ts\nfunction isNextRouterError(error) {\n\treturn isRedirectError(error) || isHTTPAccessFallbackError(error);\n}\n\n// src/next/errors/dynamic-usage.ts\nvar DYNAMIC_ERROR_CODE = \"DYNAMIC_SERVER_USAGE\";\nfunction isDynamicServerError(err) {\n\tif (typeof err !== \"object\" || err === null || !(\"digest\" in err) || typeof err.digest !== \"string\") {\n\t\treturn false;\n\t}\n\treturn err.digest === DYNAMIC_ERROR_CODE;\n}\nfunction isDynamicPostponeReason(reason) {\n\treturn (\n\t\treason.includes(\"needs to bail out of prerendering at this point because it used\") &&\n\t\treason.includes(\"Learn more: https://nextjs.org/docs/messages/ppr-caught-error\")\n\t);\n}\nfunction isDynamicPostpone(err) {\n\tif (\n\t\ttypeof err === \"object\" &&\n\t\terr !== null && // eslint-disable-next-line\n\t\ttypeof err.message === \"string\"\n\t) {\n\t\treturn isDynamicPostponeReason(err.message);\n\t}\n\treturn false;\n}\nvar isDynamicUsageError = (err) =>\n\tisDynamicServerError(err) || isBailoutToCSRError(err) || isNextRouterError(err) || isDynamicPostpone(err);\n\n// src/next/errors/postpone.ts\nvar REACT_POSTPONE_TYPE = Symbol.for(\"react.postpone\");\nfunction isPostpone(error) {\n\treturn (\n\t\ttypeof error === \"object\" &&\n\t\terror !== null && // eslint-disable-next-line\n\t\terror.$$typeof === REACT_POSTPONE_TYPE\n\t);\n}\n\n// src/next/errors/index.ts\nvar FrameworkErrorHandler = class _FrameworkErrorHandler {\n\t#frameworkError;\n\tstatic isFrameworkError(error) {\n\t\treturn isNextRouterError(error) || isBailoutToCSRError(error) || isDynamicUsageError(error) || isPostpone(error);\n\t}\n\thandleError(e) {\n\t\tif (_FrameworkErrorHandler.isFrameworkError(e)) {\n\t\t\tthis.#frameworkError = e;\n\t\t\treturn;\n\t\t}\n\t\tthrow e;\n\t}\n\tget error() {\n\t\treturn this.#frameworkError;\n\t}\n\tget isRedirectError() {\n\t\treturn isRedirectError(this.#frameworkError);\n\t}\n\tget isNotFoundError() {\n\t\treturn isHTTPAccessFallbackError(this.#frameworkError) && getAccessFallbackHTTPStatus(this.#frameworkError) === 404;\n\t}\n\tget isForbiddenError() {\n\t\treturn isHTTPAccessFallbackError(this.#frameworkError) && getAccessFallbackHTTPStatus(this.#frameworkError) === 403;\n\t}\n\tget isUnauthorizedError() {\n\t\treturn isHTTPAccessFallbackError(this.#frameworkError) && getAccessFallbackHTTPStatus(this.#frameworkError) === 401;\n\t}\n};\n\n// src/utils.ts\nvar DEFAULT_SERVER_ERROR_MESSAGE = \"Something went wrong while executing the operation.\";\nvar isError = (error) => error instanceof Error;\nvar winningBoolean = (...args) => {\n\treturn args.reduce((acc, v) => (typeof v === \"boolean\" ? v : acc), false);\n};\n\n// src/validation-errors.ts\nvar buildValidationErrors = (issues) => {\n\tconst ve = {};\n\tfor (const issue of issues) {\n\t\tconst { path, message } = issue;\n\t\tif (!path || path.length === 0) {\n\t\t\tve._errors = ve._errors ? [...ve._errors, message] : [message];\n\t\t\tcontinue;\n\t\t}\n\t\tlet ref = ve;\n\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\tconst k = path[i];\n\t\t\tif (!ref[k]) {\n\t\t\t\tref[k] = {};\n\t\t\t}\n\t\t\tref = ref[k];\n\t\t}\n\t\tconst key = path[path.length - 1];\n\t\tref[key] = ref[key]?._errors\n\t\t\t? {\n\t\t\t\t\t...structuredClone(ref[key]),\n\t\t\t\t\t_errors: [...ref[key]._errors, message],\n\t\t\t\t}\n\t\t\t: { ...structuredClone(ref[key]), _errors: [message] };\n\t}\n\treturn ve;\n};\nvar ActionServerValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\"Server Action server validation error(s) occurred\");\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\nvar ActionValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\"Server Action validation error(s) occurred\");\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\nfunction returnValidationErrors(schema, validationErrors) {\n\tthrow new ActionServerValidationError(validationErrors);\n}\nfunction formatValidationErrors(validationErrors) {\n\treturn validationErrors;\n}\nfunction formatBindArgsValidationErrors(bindArgsValidationErrors) {\n\treturn bindArgsValidationErrors;\n}\nfunction flattenValidationErrors(validationErrors) {\n\tconst flattened = {\n\t\tformErrors: [],\n\t\tfieldErrors: {},\n\t};\n\tfor (const [key, value] of Object.entries(validationErrors ?? {})) {\n\t\tif (key === \"_errors\" && Array.isArray(value)) {\n\t\t\tflattened.formErrors = [...value];\n\t\t} else {\n\t\t\tif (\"_errors\" in value) {\n\t\t\t\tflattened.fieldErrors[key] = [...value._errors];\n\t\t\t}\n\t\t}\n\t}\n\treturn flattened;\n}\nfunction flattenBindArgsValidationErrors(bindArgsValidationErrors) {\n\treturn bindArgsValidationErrors.map((ve) => flattenValidationErrors(ve));\n}\nvar ActionMetadataValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\"Invalid metadata input. Please be sure to pass metadata via `metadata` method before defining the action.\");\n\t\tthis.name = \"ActionMetadataError\";\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\nvar ActionOutputDataValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\n\t\t\t\"Invalid action data (output). Please be sure to return data following the shape of the schema passed to `dataSchema` method.\"\n\t\t);\n\t\tthis.name = \"ActionOutputDataError\";\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\n\n// src/action-builder.ts\nfunction actionBuilder(args) {\n\tconst bindArgsSchemas = args.bindArgsSchemas ?? [];\n\tfunction buildAction({ withState }) {\n\t\treturn {\n\t\t\taction: (serverCodeFn, utils) => {\n\t\t\t\treturn async (...clientInputs) => {\n\t\t\t\t\tlet currentCtx = {};\n\t\t\t\t\tconst middlewareResult = { success: false };\n\t\t\t\t\tlet prevResult = void 0;\n\t\t\t\t\tconst parsedInputDatas = [];\n\t\t\t\t\tconst frameworkErrorHandler = new FrameworkErrorHandler();\n\t\t\t\t\tif (withState) {\n\t\t\t\t\t\tprevResult = clientInputs.splice(bindArgsSchemas.length, 1)[0];\n\t\t\t\t\t}\n\t\t\t\t\tif (bindArgsSchemas.length + 1 > clientInputs.length) {\n\t\t\t\t\t\tclientInputs.push(void 0);\n\t\t\t\t\t}\n\t\t\t\t\tconst executeMiddlewareStack = async (idx = 0) => {\n\t\t\t\t\t\tif (frameworkErrorHandler.error) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst middlewareFn = args.middlewareFns[idx];\n\t\t\t\t\t\tmiddlewareResult.ctx = currentCtx;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (idx === 0) {\n\t\t\t\t\t\t\t\tif (args.metadataSchema) {\n\t\t\t\t\t\t\t\t\tconst parsedMd = await args.validationAdapter.validate(args.metadataSchema, args.metadata);\n\t\t\t\t\t\t\t\t\tif (!parsedMd.success) {\n\t\t\t\t\t\t\t\t\t\tthrow new ActionMetadataValidationError(buildValidationErrors(parsedMd.issues));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (middlewareFn) {\n\t\t\t\t\t\t\t\tawait middlewareFn({\n\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t// pass raw client input\n\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\tnext: async (nextOpts) => {\n\t\t\t\t\t\t\t\t\t\tcurrentCtx = deepmerge(currentCtx, nextOpts?.ctx ?? {});\n\t\t\t\t\t\t\t\t\t\tawait executeMiddlewareStack(idx + 1);\n\t\t\t\t\t\t\t\t\t\treturn middlewareResult;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}).catch((e) => frameworkErrorHandler.handleError(e));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst parsedInputs = await Promise.all(\n\t\t\t\t\t\t\t\t\tclientInputs.map(async (input, i) => {\n\t\t\t\t\t\t\t\t\t\tif (i === clientInputs.length - 1) {\n\t\t\t\t\t\t\t\t\t\t\tif (typeof args.inputSchemaFn === \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata: void 0,\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn args.validationAdapter.validate(await args.inputSchemaFn(), input);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn args.validationAdapter.validate(bindArgsSchemas[i], input);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tlet hasBindValidationErrors = false;\n\t\t\t\t\t\t\t\tconst bindArgsValidationErrors = Array(parsedInputs.length - 1).fill({});\n\t\t\t\t\t\t\t\tfor (let i = 0; i < parsedInputs.length; i++) {\n\t\t\t\t\t\t\t\t\tconst parsedInput = parsedInputs[i];\n\t\t\t\t\t\t\t\t\tif (parsedInput.success) {\n\t\t\t\t\t\t\t\t\t\tparsedInputDatas.push(parsedInput.data);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (i < parsedInputs.length - 1) {\n\t\t\t\t\t\t\t\t\t\t\tbindArgsValidationErrors[i] = buildValidationErrors(parsedInput.issues);\n\t\t\t\t\t\t\t\t\t\t\thasBindValidationErrors = true;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tconst validationErrors = buildValidationErrors(parsedInput.issues);\n\t\t\t\t\t\t\t\t\t\t\tmiddlewareResult.validationErrors = await Promise.resolve(\n\t\t\t\t\t\t\t\t\t\t\t\targs.handleValidationErrorsShape(validationErrors, {\n\t\t\t\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (hasBindValidationErrors) {\n\t\t\t\t\t\t\t\t\tmiddlewareResult.bindArgsValidationErrors = await Promise.resolve(\n\t\t\t\t\t\t\t\t\t\targs.handleBindArgsValidationErrorsShape(bindArgsValidationErrors, {\n\t\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (middlewareResult.validationErrors || middlewareResult.bindArgsValidationErrors) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst scfArgs = [];\n\t\t\t\t\t\t\t\tscfArgs[0] = {\n\t\t\t\t\t\t\t\t\tparsedInput: parsedInputDatas.at(-1),\n\t\t\t\t\t\t\t\t\tbindArgsParsedInputs: parsedInputDatas.slice(0, -1),\n\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tif (withState) {\n\t\t\t\t\t\t\t\t\tscfArgs[1] = { prevResult: structuredClone(prevResult) };\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst data = await serverCodeFn(...scfArgs).catch((e) => frameworkErrorHandler.handleError(e));\n\t\t\t\t\t\t\t\tif (typeof args.outputSchema !== \"undefined\" && !frameworkErrorHandler.error) {\n\t\t\t\t\t\t\t\t\tconst parsedData = await args.validationAdapter.validate(args.outputSchema, data);\n\t\t\t\t\t\t\t\t\tif (!parsedData.success) {\n\t\t\t\t\t\t\t\t\t\tthrow new ActionOutputDataValidationError(buildValidationErrors(parsedData.issues));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmiddlewareResult.success = true;\n\t\t\t\t\t\t\t\tmiddlewareResult.data = data;\n\t\t\t\t\t\t\t\tmiddlewareResult.parsedInput = parsedInputDatas.at(-1);\n\t\t\t\t\t\t\t\tmiddlewareResult.bindArgsParsedInputs = parsedInputDatas.slice(0, -1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tif (e instanceof ActionServerValidationError) {\n\t\t\t\t\t\t\t\tconst ve = e.validationErrors;\n\t\t\t\t\t\t\t\tmiddlewareResult.validationErrors = await Promise.resolve(\n\t\t\t\t\t\t\t\t\targs.handleValidationErrorsShape(ve, {\n\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst error = isError(e) ? e : new Error(DEFAULT_SERVER_ERROR_MESSAGE);\n\t\t\t\t\t\t\t\tconst returnedError = await Promise.resolve(\n\t\t\t\t\t\t\t\t\targs.handleServerError(error, {\n\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\t// pass raw client input\n\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tmiddlewareResult.serverError = returnedError;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tawait executeMiddlewareStack();\n\t\t\t\t\tconst callbackPromises = [];\n\t\t\t\t\tif (frameworkErrorHandler.error) {\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onSuccess?.({\n\t\t\t\t\t\t\t\tdata: void 0,\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\tparsedInput: parsedInputDatas.at(-1),\n\t\t\t\t\t\t\t\tbindArgsParsedInputs: parsedInputDatas.slice(0, -1),\n\t\t\t\t\t\t\t\thasRedirected: frameworkErrorHandler.isRedirectError,\n\t\t\t\t\t\t\t\thasNotFound: frameworkErrorHandler.isNotFoundError,\n\t\t\t\t\t\t\t\thasForbidden: frameworkErrorHandler.isForbiddenError,\n\t\t\t\t\t\t\t\thasUnauthorized: frameworkErrorHandler.isUnauthorizedError,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onSettled?.({\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\tresult: {},\n\t\t\t\t\t\t\t\thasRedirected: frameworkErrorHandler.isRedirectError,\n\t\t\t\t\t\t\t\thasNotFound: frameworkErrorHandler.isNotFoundError,\n\t\t\t\t\t\t\t\thasForbidden: frameworkErrorHandler.isForbiddenError,\n\t\t\t\t\t\t\t\thasUnauthorized: frameworkErrorHandler.isUnauthorizedError,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait Promise.all(callbackPromises);\n\t\t\t\t\t\tthrow frameworkErrorHandler.error;\n\t\t\t\t\t}\n\t\t\t\t\tconst actionResult = {};\n\t\t\t\t\tif (typeof middlewareResult.validationErrors !== \"undefined\") {\n\t\t\t\t\t\tif (winningBoolean(args.throwValidationErrors, utils?.throwValidationErrors)) {\n\t\t\t\t\t\t\tthrow new ActionValidationError(middlewareResult.validationErrors);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactionResult.validationErrors = middlewareResult.validationErrors;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof middlewareResult.bindArgsValidationErrors !== \"undefined\") {\n\t\t\t\t\t\tactionResult.bindArgsValidationErrors = middlewareResult.bindArgsValidationErrors;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof middlewareResult.serverError !== \"undefined\") {\n\t\t\t\t\t\tif (utils?.throwServerError) {\n\t\t\t\t\t\t\tthrow middlewareResult.serverError;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactionResult.serverError = middlewareResult.serverError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (middlewareResult.success) {\n\t\t\t\t\t\tif (typeof middlewareResult.data !== \"undefined\") {\n\t\t\t\t\t\t\tactionResult.data = middlewareResult.data;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onSuccess?.({\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tdata: actionResult.data,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\tparsedInput: parsedInputDatas.at(-1),\n\t\t\t\t\t\t\t\tbindArgsParsedInputs: parsedInputDatas.slice(0, -1),\n\t\t\t\t\t\t\t\thasRedirected: false,\n\t\t\t\t\t\t\t\thasNotFound: false,\n\t\t\t\t\t\t\t\thasForbidden: false,\n\t\t\t\t\t\t\t\thasUnauthorized: false,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onError?.({\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\terror: actionResult,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\tutils?.onSettled?.({\n\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\tresult: actionResult,\n\t\t\t\t\t\t\thasRedirected: false,\n\t\t\t\t\t\t\thasNotFound: false,\n\t\t\t\t\t\t\thasForbidden: false,\n\t\t\t\t\t\t\thasUnauthorized: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tawait Promise.all(callbackPromises);\n\t\t\t\t\treturn actionResult;\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\treturn {\n\t\t/**\n\t\t * Define the action.\n\t\t * @param serverCodeFn Code that will be executed on the **server side**\n\t\t *\n\t\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t\t */\n\t\taction: buildAction({ withState: false }).action,\n\t\t/**\n\t\t * Define the stateful action. To be used with the [`useStateAction`](https://next-safe-action.dev/docs/execute-actions/hooks/usestateaction) hook.\n\t\t * @param serverCodeFn Code that will be executed on the **server side**\n\t\t *\n\t\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t\t */\n\t\tstateAction: buildAction({ withState: true }).action,\n\t};\n}\n\n// src/safe-action-client.ts\nvar SafeActionClient = class _SafeActionClient {\n\t#handleServerError;\n\t#middlewareFns;\n\t#metadataSchema;\n\t#metadata;\n\t#inputSchemaFn;\n\t#outputSchema;\n\t#ctxType;\n\t#bindArgsSchemas;\n\t#validationAdapter;\n\t#handleValidationErrorsShape;\n\t#handleBindArgsValidationErrorsShape;\n\t#defaultValidationErrorsShape;\n\t#throwValidationErrors;\n\tconstructor(opts) {\n\t\tthis.#middlewareFns = opts.middlewareFns;\n\t\tthis.#handleServerError = opts.handleServerError;\n\t\tthis.#metadataSchema = opts.metadataSchema;\n\t\tthis.#metadata = opts.metadata;\n\t\tthis.#inputSchemaFn = opts.inputSchemaFn ?? void 0;\n\t\tthis.#outputSchema = opts.outputSchema;\n\t\tthis.#bindArgsSchemas = opts.bindArgsSchemas ?? [];\n\t\tthis.#validationAdapter = opts.validationAdapter;\n\t\tthis.#ctxType = opts.ctxType;\n\t\tthis.#handleValidationErrorsShape = opts.handleValidationErrorsShape;\n\t\tthis.#handleBindArgsValidationErrorsShape = opts.handleBindArgsValidationErrorsShape;\n\t\tthis.#defaultValidationErrorsShape = opts.defaultValidationErrorsShape;\n\t\tthis.#throwValidationErrors = opts.throwValidationErrors;\n\t}\n\t/**\n\t * Use a middleware function.\n\t * @param middlewareFn Middleware function\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#use See docs for more information}\n\t */\n\tuse(middlewareFn) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: [...this.#middlewareFns, middlewareFn],\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define metadata for the action.\n\t * @param data Metadata with the same type as the return value of the [`defineMetadataSchema`](https://next-safe-action.dev/docs/define-actions/create-the-client#definemetadataschema) optional initialization function\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#metadata See docs for more information}\n\t */\n\tmetadata(data) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: data,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the input validation schema for the action.\n\t * @param inputSchema Input validation schema\n\t * @param utils Optional utils object\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/create-the-client#inputschema See docs for more information}\n\t */\n\tschema(inputSchema, utils) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\t// @ts-expect-error\n\t\t\tinputSchemaFn:\n\t\t\t\tinputSchema[Symbol.toStringTag] === \"AsyncFunction\"\n\t\t\t\t\t? async () => {\n\t\t\t\t\t\t\tconst prevSchema = await this.#inputSchemaFn?.();\n\t\t\t\t\t\t\treturn inputSchema(prevSchema);\n\t\t\t\t\t\t}\n\t\t\t\t\t: async () => inputSchema,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: utils?.handleValidationErrorsShape ?? this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the bind args input validation schema for the action.\n\t * @param bindArgsSchemas Bind args input validation schemas\n\t * @param utils Optional utils object\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#bindargsschemas See docs for more information}\n\t */\n\tbindArgsSchemas(bindArgsSchemas, utils) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape:\n\t\t\t\tutils?.handleBindArgsValidationErrorsShape ?? this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the output data validation schema for the action.\n\t * @param schema Output data validation schema\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/create-the-client#outputschema See docs for more information}\n\t */\n\toutputSchema(dataSchema) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: dataSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the action.\n\t * @param serverCodeFn Code that will be executed on the **server side**\n\t * @param [cb] Optional callbacks that will be called after action execution, on the server.\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t */\n\taction(serverCodeFn, utils) {\n\t\treturn actionBuilder({\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\tctxType: this.#ctxType,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t}).action(serverCodeFn, utils);\n\t}\n\t/**\n\t * Define the stateful action.\n\t * To be used with the [`useStateAction`](https://next-safe-action.dev/docs/execute-actions/hooks/usestateaction) hook.\n\t * @param serverCodeFn Code that will be executed on the **server side**\n\t * @param [cb] Optional callbacks that will be called after action execution, on the server.\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t */\n\tstateAction(serverCodeFn, utils) {\n\t\treturn actionBuilder({\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\tctxType: this.#ctxType,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t}).stateAction(serverCodeFn, utils);\n\t}\n};\n\n// src/middleware.ts\nvar createMiddleware = () => {\n\treturn {\n\t\tdefine: (middlewareFn) => middlewareFn,\n\t};\n};\n\n// src/index.ts\nvar createSafeActionClient = (createOpts) => {\n\tconst handleServerError =\n\t\tcreateOpts?.handleServerError ||\n\t\t((e) => {\n\t\t\tconsole.error(\"Action error:\", e.message);\n\t\t\treturn DEFAULT_SERVER_ERROR_MESSAGE;\n\t\t});\n\treturn new SafeActionClient({\n\t\tmiddlewareFns: [async ({ next }) => next({ ctx: {} })],\n\t\thandleServerError,\n\t\tinputSchemaFn: void 0,\n\t\tbindArgsSchemas: [],\n\t\toutputSchema: void 0,\n\t\tvalidationAdapter: createOpts?.validationAdapter ?? zodAdapter(),\n\t\t// use zod adapter by default\n\t\tctxType: {},\n\t\tmetadataSchema: createOpts?.defineMetadataSchema?.() ?? void 0,\n\t\tmetadata: void 0,\n\t\tdefaultValidationErrorsShape: createOpts?.defaultValidationErrorsShape ?? \"formatted\",\n\t\tthrowValidationErrors: Boolean(createOpts?.throwValidationErrors),\n\t\thandleValidationErrorsShape: async (ve) =>\n\t\t\tcreateOpts?.defaultValidationErrorsShape === \"flattened\"\n\t\t\t\t? flattenValidationErrors(ve)\n\t\t\t\t: formatValidationErrors(ve),\n\t\thandleBindArgsValidationErrorsShape: async (ve) =>\n\t\t\tcreateOpts?.defaultValidationErrorsShape === \"flattened\"\n\t\t\t\t? flattenBindArgsValidationErrors(ve)\n\t\t\t\t: formatBindArgsValidationErrors(ve),\n\t});\n};\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/next-safe-action@7.10.4_next@15.2.1_@babel+core@7.24.5_@opentelemetry+api@1.9.0_react-d_111a2a00b79115b509a93fafd3c31e2b/node_modules/next-safe-action/dist/index.mjs\n");

/***/ })

};
;